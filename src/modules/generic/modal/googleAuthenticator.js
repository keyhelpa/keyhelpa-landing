import React, { createRef } from "react";
import Colors from "common/Colors";
import { connect } from "react-redux";
import { withRouter } from "react-router-dom";
import { Modal } from "react-bootstrap";
import ModalHeader from "./header";
import ModalFooter from "./footer";
import Style from "./style";
import SmsCodeInput from "modules/generic/form/SmsCode";
import Routes from "common/Routes";
import API from "services/api";
import axios from "axios";

class Stack extends React.Component {
  constructor(props) {
    super(props);
    this.menu = createRef();
    this.state = {
      message: null,
      errorMessage: null,
      qrCode: null,
      errorCode: null,
    };
    this.handleChange = this.handleChange.bind(this);
  }
  handleChange() {
    this.setState({ qrCode: this.menu.value });
  }

  // componentDidMount() {
  //   const { user } = this.props.state;
  //   if (user == null) return null
  //   this.setState({
  //     isLoading: true
  //   })
  //   API.request(Routes.securitySettingsRetrieve, {
  //     condition: [{
  //       value: user.id,
  //       column: 'account_id',
  //       clause: '='
  //     }]
  //   }, response => {
  //     this.setState({
  //       isLoading: false
  //     })
  //     if (response.data && response.data.length > 0) {
  //       let details = JSON.parse(response.data[0].details)
  //       this.setState({
  //         data: response.data[0],
  //         qrCode: details.qrCode ? details.qrCode : null
  //       })
  //     } else {
  //       this.setState({
  //         data: null
  //       })
  //     }
  //   }, error => {
  //     this.setState({
  //       errorMessage: 'Invalid',
  //       isLoading: false
  //     })
  //   });
  // }

  submit() {
    const { data, qrCode } = this.state;
    const { user } = this.props.state;
    if (user == null) return;
    let parameter = {
      account_id: user.id,
      otp: qrCode,
      method: "google_auth",
    };
    this.setState({
      isSubmitLoading: true,
    });
    API.request(
      Routes.securitySettingsConfirm,
      parameter,
      (response) => {
        this.setState({
          isSubmitLoading: false,
        });
        if (response.error !== null) {
          this.setState({ errorMessage: response.error });
        } else {
          this.setState({ errorMessage: null });
          this.navigate("");
        }
      },
      (error) => {
        this.setState({
          errorMessage: "Invalid",
          isSubmitLoading: false,
        });
      }
    );
  }

  navigate(route) {
    this.props.history.push(route);
  }

  body() {
    const { qrCode, errorCode, isSubmitLoading } = this.state;
    return (
      <Modal.Body
        style={{
          paddingLeft: 20,
          paddingRight: 20,
        }}
      >
        <div
          style={{
            width: "100%",
            float: "left",
          }}
          className="full-width-mobile"
        >
          <div
            style={{
              width: "100%",
              float: "left",
              textAlign: "center",
            }}
            className="full-width-mobile"
          >
            <div style={{ marginBottom: "40px" }}>
              <iframe
                src={this.props.qrCode}
                height="300"
                width="300"
                scrolling="no"
                allowtransparency="true"
                style={{ background: "inherit" }}
              ></iframe>
              <p>Complete the setup by scanning the QR code shown</p>
            </div>
            <SmsCodeInput
              value={qrCode}
              isLoading={isSubmitLoading}
              buttonStyle={{ marginTop: "40px !important" }}
              handleSubmit={async (textCode) => {
                await this.setState({
                  qrCode: textCode,
                });
                this.submit();
              }}
            />
            <p
              style={{
                paddingTop: 40,
              }}
            >
              Enter code generated by your authenticator app
            </p>
          </div>
        </div>
      </Modal.Body>
    );
  }

  render() {
    return (
      <Modal
        show={this.props.show}
        onHide={() => this.props.onCancel()}
        style={Style.modal}
      >
        <ModalHeader
          title={"Authenticator Verification"}
          subTitle={"Scan this QR code or request a key"}
          subTitle1={""}
          onCancel={() => this.props.onCancel()}
        />

        {this.body()}

        <ModalFooter
          bottomComponent={() => {
            return (
              <p>
                You can
                <b
                  style={{
                    paddingLeft: 5,
                  }}
                  onClick={() => {
                    this.navigate("");
                  }}
                  className="href-link"
                >
                  download the authenticator
                </b>{" "}
                to your phone from App or Google Play Store.
              </p>
            );
          }}
        />
      </Modal>
    );
  }
}
const mapStateToProps = (state) => ({ state: state });

const mapDispatchToProps = (dispatch) => {
  const { actions } = require("reduxhandler");
  return {
    login: (user, token) => {
      dispatch(actions.login(user, token));
    },
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Stack));
